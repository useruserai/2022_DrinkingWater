# -*- coding: utf-8 -*-
"""Untitled98.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dtkzsiZN6nFXBtvoyRZfCCZSjG7BbP6j
"""

from google.colab import drive
drive.mount('/content/drive')

import yaml

# 데이터 경로와 클래스 정보
data = {
    'train': '/content/drive/MyDrive/Homework5/data/mask_archive/train',
    'val': '/content/drive/MyDrive/Homework5/data/mask_archive/val',
    'test': '/content/drive/MyDrive/Homework5/data/mask_archive/test',
    'nc': 3,  # 클래스 수
    'names': ['with_mask', 'mask_worn_incorrect', 'without_mask']  # 클래스 이름
}

# 야멜 파일 경로
yaml_file_path = '/content/drive/MyDrive/Homework5/config/mask_data_yolo.yaml'

# yaml 파일 저장
with open(yaml_file_path, 'w') as yaml_file:
    yaml.dump(data, yaml_file)

print(f"YAML 파일이 저장되었습니다: {yaml_file_path}")

!pip install ultralytics

from ultralytics import YOLO

def train_model():
    # 모델 로드 (pretrained=False로 설정하여 처음부터 학습)
    model = YOLO('yolov5s.pt')

    # 학습 설정
    yaml_file = '/content/drive/MyDrive/Homework5/config/mask_data_yolo.yaml'  # 생성한 yaml 파일 경로
    model.train(data=yaml_file, epochs=50, imgsz=640, batch=16, lr0=0.01,
                project='runs', name='yolov5_mask', exist_ok=True)

# Train 코드 실행
train_model()

from ultralytics import YOLO

def eval_model():
    # 모델 로드 (학습한 모델)
    model = YOLO('runs/yolov5_mask/weights/best.pt')  # 학습된 모델 경로

    # 평가 데이터 경로를 설정한 YAML 파일 로드
    yaml_file = '/content/drive/MyDrive/Homework5/config/mask_data_yolo.yaml'

    # 모델을 평가 데이터로 평가
    results = model.val(data=yaml_file, save_json=True)

    # 결과 출력 (metrics/mAP50, Precision, Recall 등)
    print(results)

# Eval 코드 실행
eval_model()

from ultralytics import YOLO
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt

def infer_image(image_path, output_path=None):
    model = YOLO('runs/yolov5_mask/weights/best.pt')  # 학습된 모델 경로

    # 이미지를 예측
    result = model.predict(source=image_path, conf=0.3, save=False)[0]

    # 예측된 결과를 이미지에 그리기
    image = Image.open(image_path).convert("RGB")
    drawer = ImageDraw.Draw(image)

    # 라벨링
    class_labels = ['with_mask', 'mask_worn_incorrect', 'without_mask']
    try:
        font = ImageFont.truetype("arial.ttf", 16)
    except:
        font = ImageFont.load_default()

    # 예측된 박스에 대해 그리기
    for box in result.boxes:
        coords = box.xyxy[0].tolist()  # 박스 좌표
        confidence = float(box.conf[0])  # 신뢰도
        cls_idx = int(box.cls[0])  # 클래스 인덱스
        label = f"{class_labels[cls_idx]} {confidence:.2f}"

        # 박스 그리기
        drawer.rectangle(coords, outline="red", width=2)
        drawer.text((coords[0], coords[1] - 15), label, fill="yellow", font=font)

    # 이미지를 화면에 표시 (matplotlib 사용)
    plt.figure(figsize=(10, 10))
    plt.imshow(image)
    plt.axis('off')  # 축을 숨김
    plt.show()

    # 결과 저장
    if output_path:
        image.save(output_path)
        print(f"✅ 저장 완료: {output_path}")

# 이미지를 추론
infer_image('/content/마스크 사진.jpg')